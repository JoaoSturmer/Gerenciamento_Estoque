package visualizar;

import dao.CategoriaDAO;
import dao.ProdutoDAO;
import modelo.Categoria;
import modelo.Produto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;

/**
 * Janela para geração de diversos relatórios de produtos e categorias.
 *
 * <p>
 * Dependendo da opção selecionada em {@code JCSeletor}, exibe:
 * <ul>
 * <li>Lista de preços ordenada por nome.</li>
 * <li>Balanço físico e financeiro do estoque.</li>
 * <li>Produtos abaixo da quantidade mínima (com ícone e cor).</li>
 * <li>Produtos acima da quantidade máxima (com ícone e cor).</li>
 * <li>Relação de quantidade de produtos por categoria.</li>
 * </ul>
 * Os dados são obtidos através de {@link ProdutoDAO} e
 * {@link CategoriaDAO}.</p>
 *
 * @author Ricardo Zimmer Junior
 */
public class FrmRelatorio extends javax.swing.JFrame {

    /**
     * Modelo de tabela utilizado para exibição dos relatórios.
     */
    private DefaultTableModel modeloTabela;

    /**
     * DAO para operações relacionadas a produtos.
     */
    private ProdutoDAO produtoDAO = new ProdutoDAO();

    /**
     * DAO para operações relacionadas a categorias.
     */
    private CategoriaDAO categoriaDAO = new CategoriaDAO();

    /**
     * Lista de produtos obtida do banco de dados.
     */
    private List<Produto> produtos = new ArrayList<>();

    /**
     * Construtor padrão da janela de relatórios.
     * <p>
     * Inicializa componentes gráficos.</p>
     */
    public FrmRelatorio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        JCSeletor = new javax.swing.JComboBox<>();
        JBGerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaRelatorio = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        jLabel1.setText("Relatórios de Estoque");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jButton1.setText("cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        jLabel2.setText("Relatórios de Estoque");

        JCSeletor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lista de Preços dos produtos", "Balanço Físico e Financeiro dos produtos", "Produtos abaixo da quantidade minima", "Produto acima da quantidade maxima", "Relação de produtos por categoria" }));
        JCSeletor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCSeletorActionPerformed(evt);
            }
        });

        JBGerar.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        JBGerar.setText("Gerar Relatório");
        JBGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGerarActionPerformed(evt);
            }
        });

        TabelaRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gere um relatório para visualizá-lo"
            }
        ));
        jScrollPane1.setViewportView(TabelaRelatorio);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JCSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JBGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JCSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void JCSeletorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCSeletorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCSeletorActionPerformed
    /**
     * Evento acionado ao clicar no botão "Gerar". Gera diferentes relatórios
     * com base na opção selecionada no combo box {@code JCSeletor}. Os tipos de
     * relatórios disponíveis são:
     * <ul>
     * <li>0 - Lista de preços dos produtos</li>
     * <li>1 - Balanço físico e financeiro do estoque</li>
     * <li>2 - Produtos abaixo da quantidade mínima</li>
     * <li>3 - Produtos acima da quantidade máxima</li>
     * <li>4 - Relação entre produtos e categorias</li>
     * </ul>
     *
     * Os dados são exibidos na tabela {@code TabelaRelatorio}.
     *
     * @param evt Evento de clique do botão "Gerar".
     */
    private void JBGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGerarActionPerformed
        int tipoRelatorio = JCSeletor.getSelectedIndex();
        switch (tipoRelatorio) {
            case 0:
                /* Relatorio de lista de precos */
                produtos = produtoDAO.getListaProdutos();
                Collections.sort(produtos, Comparator.comparing(Produto::getNome));

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Preço", "Unidade de medida", "Categoria"});
                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                        p.getId(),
                        p.getNome(),
                        "R$ " + p.getPreco(),
                        p.getUnidade(),
                        p.getCategoria()});
                }
                TabelaRelatorio.setModel(modeloTabela);
                jLabel1.setText("");
                break;
            case 1:
                /* Relatorio de balanco fisco e financeiro*/
                double valorTotalEstoque = 0.0;
                produtos = produtoDAO.getListaProdutos();
                Collections.sort(produtos, Comparator.comparing(Produto::getNome));

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade", "Valor Unitario", "Valor Total"});
                for (Produto p : produtos) {
                    valorTotalEstoque += p.getQuantidade() * p.getPreco();
                    modeloTabela.addRow(new Object[]{
                        p.getId(),
                        p.getNome(),
                        p.getQuantidade(),
                        "R$ " + p.getPreco(),
                        "R$ " + (p.getPreco() * p.getQuantidade())});
                }
                TabelaRelatorio.setModel(modeloTabela);

                jLabel1.setText("Valor total de todo o estoque: R$ " + valorTotalEstoque);
                break;
            case 2:
                /* Relatorio de produtos abaixo da quantidade minima*/
                produtos = produtoDAO.getListaProdutos();

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade Minima", "Quantidade Atual", "Status"});
                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                        p.getId(),
                        p.getNome(),
                        p.getQuantidadeMinima(),
                        p.getQuantidade(),
                        p.getQuantidade() < p.getQuantidadeMinima() ? "Baixo" : "Normal"
                    });
                }
                TabelaRelatorio.setModel(modeloTabela);

                // Aplica o renderizador à coluna "Status"
                break;
            case 3:
                /* Relatorio de produtos acima da quantidade maxima */
                produtos = produtoDAO.getListaProdutos();

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade Maxima", "Quantidade Atual", "Status"});

                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                        p.getId(),
                        p.getNome(),
                        p.getQuantidadeMaxima(),
                        p.getQuantidade(),
                        p.getQuantidade() > p.getQuantidadeMaxima() ? "Alto" : "Normal"
                    });
                }

                TabelaRelatorio.setModel(modeloTabela);

                break;
            case 4:
                /* Relatorio de relacao de produto categoria */
                List<Produto> produtos = produtoDAO.getListaProdutos();
                List<Categoria> categorias = categoriaDAO.getListarCategoria();
                Map<String, Integer> contagemPorCategoria = new HashMap<>();

                for (Categoria c : categorias) {
                    contagemPorCategoria.put(c.getNome_categoria(), 0);
                }

                for (Produto p : produtos) {
                    Categoria categoria = p.getCategoria();
                    if (categoria != null) {
                        String nomeCategoria = categoria.getNome_categoria();
                        contagemPorCategoria.put(nomeCategoria, contagemPorCategoria.get(nomeCategoria) + 1);
                    }
                }

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"Categoria", "Quantidade Produtos Distintos"});

                for (Categoria c : categorias) {
                    String nomeCategoria = c.getNome_categoria();
                    int quantidade = contagemPorCategoria.getOrDefault(nomeCategoria, 0);
                    modeloTabela.addRow(new Object[]{nomeCategoria, quantidade});
                }

                TabelaRelatorio.setModel(modeloTabela);
                jLabel1.setText("");
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_JBGerarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBGerar;
    private javax.swing.JComboBox<String> JCSeletor;
    private javax.swing.JTable TabelaRelatorio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
